import streamlit as st
import joblib
import pandas as pd

# ‚úÖ Rerun seguro para versiones nuevas de Streamlit
try:
    from streamlit.runtime.scriptrunner import rerun
except ImportError:
    rerun = lambda: st.warning("‚ö†Ô∏è Reinicio no disponible en esta versi√≥n de Streamlit.")

# ‚úÖ Verificar si se debe reiniciar
if st.session_state.get("reset_now", False):
    st.session_state.clear()
    rerun()

# Cargar el modelo
modelo = joblib.load("modelo_churn_xgb.pkl")

# Configurar p√°gina
st.set_page_config(page_title="Predicci√≥n de Churn", page_icon="üìä")
st.title("üìä Predicci√≥n de Churn de Clientes")
st.markdown("""
Esta herramienta predice si un cliente de telecomunicaciones tiene probabilidad de **abandonar el servicio** (churn).

üîé Basado en caracter√≠sticas como el tiempo como cliente, el tipo de contrato y los servicios contratados, pod√©s anticipar qu√© clientes est√°n en riesgo.

üëâ Complet√° los datos del cliente y hac√© clic en **Predecir**.
""")

# Valores por defecto
defaults = {
    'total_charges': 0.0,
    'monthly_charges': 0.0,
    'tenure': 0,
    'gender': "Female",
    'partner': "No",
    'online_security': "No",
    'paperless': "No",
    'contract_two_year': "No",
    'fiber_optic': "No",
    'electronic_check': "No"
}

for key, value in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = value

# Inputs
total_charges = st.number_input("Total Charges ($)", min_value=0.0, step=10.0, key='total_charges')
monthly_charges = st.number_input("Monthly Charges ($)", min_value=0.0, step=1.0, key='monthly_charges')
tenure = st.slider("Meses de permanencia (Tenure)", min_value=0, max_value=72, key='tenure')

gender = st.selectbox("G√©nero", ["Female", "Male"], key='gender')
partner = st.selectbox("¬øTiene pareja?", ["No", "S√≠"], key='partner') == "S√≠"
online_security = st.selectbox("¬øTiene seguridad en l√≠nea?", ["No", "S√≠"], key='online_security') == "S√≠"
paperless = st.selectbox("¬øUsa facturaci√≥n sin papel?", ["No", "S√≠"], key='paperless') == "S√≠"
contract_two_year = st.selectbox("¬øTiene contrato por 2 a√±os?", ["No", "S√≠"], key='contract_two_year') == "S√≠"
fiber_optic = st.selectbox("¬øTiene fibra √≥ptica?", ["No", "S√≠"], key='fiber_optic') == "S√≠"
electronic_check = st.selectbox("¬øPaga con cheque electr√≥nico?", ["No", "S√≠"], key='electronic_check') == "S√≠"

# Crear DataFrame
input_df = pd.DataFrame([{
    'TotalCharges': total_charges,
    'MonthlyCharges': monthly_charges,
    'tenure': tenure,
    'InternetService_Fiber optic': int(fiber_optic),
    'PaymentMethod_Electronic check': int(electronic_check),
    'Contract_Two year': int(contract_two_year),
    'PaperlessBilling': int(paperless),
    'gender': 1 if gender == "Female" else 0,
    'OnlineSecurity': int(online_security),
    'Partner': int(partner)
}])

# Bot√≥n de predicci√≥n
if st.button("üîÆ Predecir Churn", key="predict"):
    pred = modelo.predict(input_df)[0]
    proba = modelo.predict_proba(input_df)[0][1]

    if pred == 1:
        st.error(f"‚ö†Ô∏è El cliente tiene ALTA probabilidad de irse. (Probabilidad: {proba:.2%})")
    else:
        st.success(f"‚úÖ El cliente probablemente permanecer√°. (Probabilidad de churn: {proba:.2%})")

    # Explicaci√≥n
    st.markdown("### üß† ¬øPor qu√© esta predicci√≥n?")

    st.markdown("#### ‚úÖ Factores que ayudan a retener al cliente:")
    if tenure >= 12:
        st.markdown("- **Buena antig√ºedad**: clientes con m√°s meses suelen ser m√°s leales.")
    if contract_two_year:
        st.markdown("- **Contrato por 2 a√±os**: fuerte indicador de permanencia.")
    if online_security:
        st.markdown("- **Cuenta con seguridad en l√≠nea**, lo que indica mayor compromiso.")
    if not electronic_check:
        st.markdown("- No usa cheque electr√≥nico, lo cual se asocia a menor riesgo.")
    if partner:
        st.markdown("- Tiene pareja, lo cual hist√≥ricamente reduce ligeramente el churn.")

    st.markdown("#### ‚ö†Ô∏è Factores de riesgo a considerar:")
    if tenure <= 6:
        st.markdown("- **Poca permanencia**: los clientes nuevos tienden a irse m√°s f√°cilmente.")
    if not contract_two_year:
        st.markdown("- **No tiene contrato largo**, lo cual permite desvinculaci√≥n f√°cil.")
    if not online_security:
        st.markdown("- **No tiene seguridad en l√≠nea**, puede ser un cliente menos vinculado.")
    if electronic_check:
        st.markdown("- **Paga con cheque electr√≥nico**, uno de los m√©todos con mayor tasa de churn.")
    if paperless:
        st.markdown("- Aunque usa facturaci√≥n digital, no siempre es un indicador de retenci√≥n.")

# üîÅ Bot√≥n para reiniciar
if st.button("üîÅ Reiniciar formulario", key="reset_button"):
    st.session_state["reset_now"] = True
    rerun()
